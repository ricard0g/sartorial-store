{{ 'flickity.min.css' | asset_url | stylesheet_tag }}
{{ 'card-carousel.css' | asset_url | stylesheet_tag }}
{{ 'product-card.css' | asset_url | stylesheet_tag }}
{{ 'product-recommendations.css' | asset_url | stylesheet_tag }}
<script src="{{ 'flickity.pkgd.min.js' | asset_url }}" defer></script>
<div
    class="product-recommendations__wrapper"
    data-url="{{ routes.product_recommendations_url }}?section_id={{ section.id }}&product_id={{ product.id }}&limit=4&intent={{ section.settings.recommendation_type }}"
>
    {% if recommendations.performed? and recommendations.products_count > 0 %}
        {% if recommendations.intent == 'related' %}
            <h2 class="product-recommendations__title">You may also like</h2>
        {% elsif recommendations.intent == 'complementary' %}
            <h2 class="product-recommendations__title">Pair it with</h2>
        {% endif %}
    {% endif %}
    <div class="product-recommendations__content-wrapper">
        <ul class="product-recommendations__list">
            {% for product in recommendations.products %}
                <li class="product-recommendations__list-item">
                    {% render 'product-card', product: product %}
                </li>
            {% endfor %}
        </ul>
    </div>
</div>

{% javascript %}
    const productRecommendationsSection = document.querySelector('.product-recommendations__wrapper');

    const handleIntersection = (entries, observer) => {
        if (!entries[0].isIntersecting) return;

        const url = productRecommendationsSection.dataset.url;

        fetch(url)
            .then((response) => response.text())
            .then((text) => {
                const html = document.createElement('div');
                console.log(html);
                html.innerHTML = text;
                const recommendations = html.querySelector('.product-recommendations__wrapper');

                if (recommendations && recommendations.innerHTML.trim().length) {
                    productRecommendationsSection.innerHTML = recommendations.innerHTML;
                }

                const carousel = document.querySelector('.product-recommendations__content-wrapper');
                let dialogCarousels = {};

                carousel.addEventListener('click', (e) => {
                    if (e.target.matches('[data-open-modal]')) {
                        const dialog = e.target.nextElementSibling;
                        console.log(dialog);
                        dialog.showModal();

                        // Initialize the carousel
                        if (!dialogCarousels[dialog.id]) {
                            const dialogCarousel = dialog.querySelector('.product-slider__carousel-dialog');
                            dialogCarousels[dialog.id] = new Flickity(dialogCarousel, {
                                wrapAround: true,
                                cellAllign: 'center',
                                imagesLoaded: true,
                                pageDots: false,
                                draggable: false,
                            });
                        }
                    }

                    if (e.target.matches('[data-close-modal]') || e.target.closest('[data-close-modal]')) {
                        const dialog = e.target.closest('dialog');
                        dialog.close();
                    }
                });
            })
            .catch((e) => console.error(e));
    };

    const addEventListener = (e) => {};

    const observer = new IntersectionObserver(handleIntersection, { rootMargin: '0px 0px 200px 0px' });
    observer.observe(productRecommendationsSection);
{% endjavascript %}

{% schema %}
{
    "name": "Product Recommendations",
    "tag": "section",
    "class": "product-recommendations__container",
    "settings": [
        {
            "type": "select",
            "id": "recommendation_type",
            "label": "Recommendation Type",
            "options": [
                {
                    "value": "related",
                    "label": "Related Products"
                },
                {
                    "value": "complementary",
                    "label": "Complementary Products"
                }
            ],
            "default": "related",
            "info": "Pick the type of product recommendations to show: related products, similar to the current product, or complementary products, designed to pair with the current product."
        }
    ],
    "presets": [
        {
            "name": "Related Products"
        }
    ]
}
{% endschema %}
